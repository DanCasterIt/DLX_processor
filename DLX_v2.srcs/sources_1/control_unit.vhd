library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
use ieee.numeric_std.all;

entity control_unit is
	port(
	   Clk : in std_logic;
	   Rst : in std_logic;
       instruction_bus : in std_logic_vector(31 downto 0);
       PC_drive : out std_logic;
	   ---pipe stage 1---
	   RF1: out std_logic;
	   RF2: out std_logic;
	   SESel: out std_logic;
	   EN1: out std_logic;
	   ---pipe stage 2---
	   S1: out std_logic;
	   S2: out std_logic;
	   ALU: out std_logic_vector(4 downto 0);
	   ZSel: out std_logic;
	   EN2: out std_logic;
	   ---pipe stage 3---
	   RM: out std_logic;
	   WM: out std_logic;
	   BraE: out std_logic;
	   JmpE: out std_logic;
	   EN3: out std_logic;
	   ---pipe stage 4---
	   S3: out std_logic;
       WF1: out std_logic;
	   RegDst: out std_logic;
       EN0: out std_logic
    );
end control_unit;

architecture BEHAV of control_unit is
    constant OP_CODE_SIZE : integer :=  6;						--OPCODE field size
    constant FUNC_SIZE    : integer :=  11;						--FUNC field size
	constant INSTRUCTIONS_EXECUTION_CYCLES : integer := 4;		--instructions Execution (Clock Cycles)
	constant MICROCODE_MEM_SIZE: integer := 480;				--microcode memory size, 18 instructions with 4 row each one
	constant CW_SIZE: integer := 22;							--control word size
	type mem_array is array (integer range 0 to MICROCODE_MEM_SIZE - 1) of std_logic_vector(CW_SIZE - 1 downto 0);
	--RF1, RF2, SESel, EN1, S1, S2, ALU1, ALU2, ALU3, ALU4, ALU5, ZSel, EN2, RM, WM, BraE, JmpE, EN3, S3, WF1, RegDst, EN0
	constant microcode: mem_array := (
								  --J-type:
								  "1111111111111111111111",	--0*4 = 0
								  "1111111111111111111111",	--This fake operation code is put to prevent
								  "1111111111111111111111",	--warnings for signals like ENx
								  "1111111111111111111111",	--that I put for eventual future interrupt handling.
								  "0000000000000000000000",	--1*4 = 4 (I_nop)
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
	                              "0000000000000000000000",	--2*4 = 8 J_j
								  "0000100000000000000000",
								  "0000000000000000100000",
								  "0000000000000000000000",
								  "0000000000000000000000",	--3*4 = 12 J_jal
								  "0000100000000000000000",
								  "0000000000000000100000",
								  "0000000000000000000100",
								  "1010000000000000000000",	--4*4 = 16 I_beqz
								  "0000100000010000000000",
								  "0000000000000001000000",
								  "0000000000000000000000",
								  "1010000000000000000000",	--5*4 = 20 I_bnez
								  "0000100000000000000000",
								  "0000000000000001000000",
								  "0000000000000000000000",
								  "0000000000000000000000",	--6*4 = 
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
	                              "0000000000000000000000",	--7*4 =  
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
								  "1010000000000000000000",	--8*4 = 32 I_addi 
								  "0000000000000000000000",
								  "0000000000000000000000",
								  "0000000000000000000110",
								  "1010000000000000000000",	--9*4 = 36 I_addui 
								  "0000000000000000000000",
								  "0000000000000000000000",
								  "0000000000000000000110",
								  "1010000000000000000000",	--10*4 = 40 I_subi 
								  "0000000000100000000000",
								  "0000000000000000000000",
								  "0000000000000000000110",
								  "1010000000000000000000",	--11*4 = 44 I_subui
								  "0000000000100000000000",
								  "0000000000000000000000",
								  "0000000000000000000110",
	                              "1010000000000000000000",	--12*4 = 48 I_andi 
								  "0000000011000000000000",
								  "0000000000000000000000",
								  "0000000000000000000110",
								  "1010000000000000000000",	--13*4 = 52 I_ori 
								  "0000000010000000000000",
								  "0000000000000000000000",
								  "0000000000000000000110",
								  "1010000000000000000000",	--14*4 = 56 I_xori 
								  "0000000010100000000000",
								  "0000000000000000000000",
								  "0000000000000000000110",
								  "0000000000000000000000",	--15*4 =  
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",	--16*4 = 
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
	                              "0000000000000000000000",	--17*4 =  
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
								  "1010000000000000000000",	--18*4 = 72 I_jr 
								  "0000000000000000000000",
								  "0000000000000000100000",
								  "0000000000000000000000",
								  "1010000000000000000000",	--19*4 = 76 I_jalr 
								  "0000000000000000000000",
								  "0000000000000000100000",
								  "0000000000000000000110",
								  "1010000000000000000000",	--20*4 = 80 I_slli 
								  "0000000111000000000000",
								  "0000000000000000000000",
								  "0000000000000000000110",
								  "0000000000000000000000",	--21*4 = 84 I_nop
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
	                              "1010000000000000000000",	--22*4 = 88 I_srli
								  "0000000110100000000000",
								  "0000000000000000000000",
								  "0000000000000000000110",
								  "1010000000000000000000",	--23*4 = 92 I_srai
								  "0000001001100000000000",
								  "0000000000000000000000",
								  "0000000000000000000110",
								  "1010000000000000000000",	--24*4 = 96 I_seqi
								  "0000000101100000000000",
								  "0000000000000000000000",
								  "0000000000000000000110",
								  "1010000000000000000000",	--25*4 = 100 I_snei
								  "0000000110000000000000",
								  "0000000000000000000000",
								  "0000000000000000000110",
								  "1010000000000000000000",	--26*4 = 104 I_slti
								  "0000001000100000000000",
								  "0000000000000000000000",
								  "0000000000000000000110",
	                              "1010000000000000000000",	--27*4 = 108 I_sgti
								  "0000000111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000110",
								  "1010000000000000000000",	--28*4 = 112 I_slei
								  "0000001001000000000000",
								  "0000000000000000000000",
								  "0000000000000000000110",
								  "1010000000000000000000",	--29*4 = 116 I_sgei
								  "0000001000000000000000",
								  "0000000000000000000000",
								  "0000000000000000000110",
								  "0000000000000000000000",	--30*4 =  
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",	--31*4 = 
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
	                              "0000000000000000000000",	--32*4 =  
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",	--33*4 =  
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",	--34*4 =  
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
								  "1110000000000000000000",	--35*4 = 140 I_lw 
								  "0000000000000000000000",
								  "0000000000000100000000",
								  "0000000000000000001110",
								  "0000000000000000000000",	--36*4 = 
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
	                              "0000000000000000000000",	--37*4 =  
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",	--38*4 =  
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",	--39*4 =  
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",	--40*4 =  
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",	--41*4 = 
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
	                              "0000000000000000000000",	--42*4 = 
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
								  "1110000000000000000000",	--43*4 = 172 I_sw
								  "0000000000000000000000",
								  "0000000000000010000000",
								  "0000000000000000000000",
								  "0000000000000000000000",	--44*4 = 
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",	--45*4 = 
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",	--46*4 = 
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
	                              "0000000000000000000000",	--47*4 =  
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",	--48*4 =  
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",	--49*4 =  
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",	--50*4 =  
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",	--51*4 = 
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
	                              "0000000000000000000000",	--52*4 =  
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",	--53*4 =  
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",	--54*4 =  
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",	--55*4 =  
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",	--56*4 = 
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
	                              "0000000000000000000000",	--57*4 =  
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
								  "1010000000000000000000",	--58*4 = 232 I_sltui
								  "0000000100100000000000",
								  "0000000000000000000000",
								  "0000000000000000000110",
								  "1010000000000000000000",	--59*4 = 236 I_sgtui
								  "0000000011100000000000",
								  "0000000000000000000000",
								  "0000000000000000000110",
								  "1010000000000000000000",	--60*4 = 240 I_sleui
								  "0000000101000000000000",
								  "0000000000000000000000",
								  "0000000000000000000110",
								  "1010000000000000000000",	--61*4 = 244 I_sgeui
								  "0000000100000000000000",
								  "0000000000000000000000",
								  "0000000000000000000110",
								  --R-type:
								  "1100000000000000000000",	--232+4*4 = 248 R_sll
								  "0000010111000000000000",
								  "0000000000000000000000",
								  "0000000000000000000100",
	                              "0000000000000000000000",	--232+5*4 =  
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
								  "1100000000000000000000",	--232+6*4 = 256 R_srl 
								  "0000010110100000000000",
								  "0000000000000000000000",
								  "0000000000000000000100",
								  "1100000000000000000000",	--232+7*4 = 260 R_sra 
								  "0000011001100000000000",
								  "0000000000000000000000",
								  "0000000000000000000100",
								  "0000000000000000000000",	--232+8*4 =  
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",	--232+9*4 = 
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
	                              "0000000000000000000000",	--232+10*4 =  
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",	--232+11*4 =  
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",	--232+12*4 =  
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",	--232+13*4 =  
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",	--232+14*4 = 
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
	                              "0000000000000000000000",	--232+15*4 =  
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",	--232+16*4 =  
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",	--232+17*4 =  
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",	--232+18*4 =  
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
	                              "0000000000000000000000",	--232+19*4 =  
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",	--232+20*4 =  
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",	--232+21*4 =  
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",	--232+22*4 =  
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",	--232+23*4 = 
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
	                              "0000000000000000000000",	--232+24*4 =  
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",	--232+25*4 =  
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",	--232+26*4 =  
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",	--232+27*4 =  
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",	--232+28*4 = 
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
	                              "0000000000000000000000",	--232+29*4 =  
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",	--232+30*4 =  
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",	--232+31*4 =  
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
								  "1100000000000000000000",	--232+32*4 = 360 R_add
								  "0000010000000000000000",
								  "0000000000000000000000",
								  "0000000000000000000100",
	                              "1100000000000000000000",	--232+33*4 = 364 R_addu  
								  "0000010000000000000000",
								  "0000000000000000000000",
								  "0000000000000000000100",
								  "1100000000000000000000",	--232+34*4 = 368 R_sub 
								  "0000010000100000000000",
								  "0000000000000000000000",
								  "0000000000000000000100",
								  "1100000000000000000000",	--232+35*4 = 372 R_subu 
								  "0000010000100000000000",
								  "0000000000000000000000",
								  "0000000000000000000100",
								  "1100000000000000000000",	--232+36*4 = 376 R_and 
								  "0000010011000000000000",
								  "0000000000000000000000",
								  "0000000000000000000100",
								  "1100000000000000000000",	--232+37*4 = 380 R_or
								  "0000010010000000000000",
								  "0000000000000000000000",
								  "0000000000000000000100",
	                              "1100000000000000000000",	--232+38*4 = 384 R_xor 
								  "0000010010100000000000",
								  "0000000000000000000000",
								  "0000000000000000000100",
								  "0000000000000000000000",	--232+39*4 = 388 NOP_INSERTED_BY_ME 
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
								  "1100000000000000000000",	--232+40*4 = 392 R_seq 
								  "0000010101100000000000",
								  "0000000000000000000000",
								  "0000000000000000000100",
								  "1100000000000000000000",	--232+41*4 = 396 R_sne 
								  "0000010110000000000000",
								  "0000000000000000000000",
								  "0000000000000000000100",
								  "1100000000000000000000",	--232+42*4 = 400 R_slt
								  "0000011000100000000000",
								  "0000000000000000000000",
								  "0000000000000000000100",
	                              "1100000000000000000000",	--232+43*4 = 404 R_sgt 
								  "0000010111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000100",
								  "1100000000000000000000",	--232+44*4 = 408 R_sle
								  "0000011001000000000000",
								  "0000000000000000000000",
								  "0000000000000000000100",
								  "1100000000000000000000",	--232+45*4 = 412 R_sge 
								  "0000011000000000000000",
								  "0000000000000000000000",
								  "0000000000000000000100",
								  "0000000000000000000000",	--232+46*4 =  
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
	                              "0000000000000000000000",	--232+47*4 =  
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",	--232+48*4 =  
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",	--232+49*4 =  
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",	--232+50*4 =  
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",	--232+51*4 = 
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
	                              "0000000000000000000000",	--232+52*4 =  
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",	--232+53*4 =  
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",	--232+54*4 =  
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",	--232+55*4 =  
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",	--232+56*4 = 
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
	                              "0000000000000000000000",	--232+57*4 =  
								  "0000001111100000000000",
								  "0000000000000000000000",
								  "0000000000000000000000",
								  "1100000000000000000000",	--232+58*4 = 464 R_sltu 
								  "0000010100100000000000",
								  "0000000000000000000000",
								  "0000000000000000000100",
								  "1100000000000000000000",	--232+59*4 = 468 R_sgtu 
								  "0000010011100000000000",
								  "0000000000000000000000",
								  "0000000000000000000100",
								  "1100000000000000000000",	--232+60*4 = 472 R_sleu 
								  "0000010101000000000000",
								  "0000000000000000000000",
								  "0000000000000000000100",
								  "1100000000000000000000",	--232+61*4 = 476 R_sgeu 
								  "0000010100000000000000",
								  "0000000000000000000000",
								  "0000000000000000000100"
								);							
    signal cw_s : std_logic_vector(CW_SIZE - 1 downto 0);
    signal uPC1 : integer range 0 to 480 := 87;
	signal uPC2 : integer range 0 to 480 := 84;
	signal uPC3 : integer range 0 to 480 := 85;
	signal uPC4 : integer range 0 to 480 := 86;
    signal ICount1 : integer range 0 to INSTRUCTIONS_EXECUTION_CYCLES := 0;
	signal ICount2 : integer range 0 to INSTRUCTIONS_EXECUTION_CYCLES := 1;
	signal ICount3 : integer range 0 to INSTRUCTIONS_EXECUTION_CYCLES := 2;
	signal ICount4 : integer range 0 to INSTRUCTIONS_EXECUTION_CYCLES := 3;
	
	--signal DEBUG : integer := 0;
begin
    uPC_Proc: process (Clk, Rst)
    variable IR_opcode_shift : std_logic_vector(OP_CODE_SIZE + 1 downto 0) := (others => '0');  -- OpCode part of IR
    variable IR_func_shift : std_logic_vector(FUNC_SIZE + 1 downto 0) := (others => '0');   -- Func part of IR when Rtype		
    variable cnt, valu : integer range 0 to 4:= 0;
    variable old_desr_reg_1, old_desr_reg_2, old_desr_reg_3 : std_logic_vector(5-1 downto 0) := (others => '1');
	variable validity_bit : std_logic_vector(2 downto 0) := (others => '0');
    variable op : std_logic_vector(5 downto 0) := (others => '0');
    variable func : std_logic_vector(10 downto 0) := (others => '0');
    variable is_jump : integer range 0 to 1 := 0;
    begin  -- process uPCx_Proc
		if Rst = '1' then                   -- asynchronous reset (active low)
			cnt := 0;
            func := (others => '0');
            op := "010101";
            PC_drive <= '0'; --unblock PC register
			validity_bit := (others => '0');
			is_jump := 0;
			--------------------------
			uPC1 <= 87;
			ICount1 <= 0;
			--------------------------
			uPC2 <= 84;
			ICount2 <= 1;
			--------------------------
			uPC3 <= 85;
			ICount3 <= 2;
			--------------------------
			uPC4 <= 86;
			ICount4 <= 3;
        elsif (Clk'event and Clk = '1') then	--hazard detection
			if cnt = 0 then
				--HAZARD DETECTION FOR JUMP INSTRUCTIONS
				if instruction_bus(31 downto 26) = "000010" or	--J		OP code
				instruction_bus(31 downto 26) = "000011" or		--JAL	OP code
				instruction_bus(31 downto 26) = "010011" or		--JALR	OP code
				instruction_bus(31 downto 26) = "010010" or		--JR	OP code
				instruction_bus(31 downto 26) = "000100" or		--BEQZ	OP code
				instruction_bus(31 downto 26) = "000101" or		--BNEZ	OP code
				instruction_bus(31 downto 26) = "000110" or		--BFPT	OP code
				instruction_bus(31 downto 26) = "000111" then	--BFPF	OP code
					func := instruction_bus(10 downto 0);
                    op := instruction_bus(31 downto 26);
					PC_drive <= '0'; --unblock PC register
					valu := 4;
					cnt := cnt + 1;
					is_jump := 1;
					--DEBUG <= 3;
				--RAW HAZARD DETECTION FOR R TYPE INSTRUCTIONS
				elsif instruction_bus(31 downto 26) = "000000" and --R-type instruction
				((instruction_bus(25 downto 21) = old_desr_reg_1 or --source reg 1
				instruction_bus(20 downto 16) = old_desr_reg_1) and --source reg 2
				validity_bit(0) = '1') then
				    old_desr_reg_1 := (others => '1');
					op := "010101"; --force NOP op code
					PC_drive <= '1'; --block PC register
					valu := 3;
					cnt := cnt + 1;
					--DEBUG <= 1;
				elsif instruction_bus(31 downto 26) = "000000" and --R-type instruction
				((instruction_bus(25 downto 21) = old_desr_reg_2 or --source reg 1
				instruction_bus(20 downto 16) = old_desr_reg_2) and --source reg 2
				validity_bit(1) = '1') then
				    old_desr_reg_2 := (others => '1');
					op := "010101"; --force NOP op code
					PC_drive <= '1'; --block PC register
					valu := 2;
					cnt := cnt + 1;
					--DEBUG <= 1;
				elsif instruction_bus(31 downto 26) = "000000" and --R-type instruction
				((instruction_bus(25 downto 21) = old_desr_reg_3 or --source reg 1
				instruction_bus(20 downto 16) = old_desr_reg_3) and --source reg 2
				validity_bit(2) = '1') then
				    old_desr_reg_3 := (others => '1');
					op := "010101"; --force NOP op code
					PC_drive <= '1'; --block PC register
					valu := 1;
					cnt := cnt + 1;
					--DEBUG <= 1;
				--RAW HAZARD DETECTION FOR I TYPE INSTRUCTIONS
				elsif instruction_bus(31 downto 26) /= "000000" and --I-type instruction
				((instruction_bus(25 downto 21) = old_desr_reg_1 and --the only source register
				validity_bit(0) = '1') and
				is_jump = 0) then
				    old_desr_reg_1 := (others => '1');
					op := "010101"; --force NOP op code
					PC_drive <= '1'; --block PC register
					valu := 3;
					cnt := cnt + 1;
					--DEBUG <= 1;
				elsif instruction_bus(31 downto 26) /= "000000" and --I-type instruction
				((instruction_bus(25 downto 21) = old_desr_reg_2 and --the only source register
				validity_bit(1) = '1') and
				is_jump = 0) then
				    old_desr_reg_2 := (others => '1');
					op := "010101"; --force NOP op code
					PC_drive <= '1'; --block PC register
					valu := 2;
					cnt := cnt + 1;
					--DEBUG <= 1;
				elsif instruction_bus(31 downto 26) /= "000000" and --I-type instruction
				((instruction_bus(25 downto 21) = old_desr_reg_3 and --the only source register
				validity_bit(2) = '1') and
				is_jump = 0) then
				    old_desr_reg_3 := (others => '1');
					op := "010101"; --force NOP op code
					PC_drive <= '1'; --block PC register
					valu := 1;
					cnt := cnt + 1;
					--DEBUG <= 1;
				else
					--be transparent from the CU point of view.
					func := instruction_bus(10 downto 0);
					op := instruction_bus(31 downto 26);
				end if;
			elsif cnt = valu then
				PC_drive <= '0'; --unblock PC register
				cnt := 0; --reset counter
				--be transparent from the CU point of view.
				func := instruction_bus(10 downto 0);
				op := instruction_bus(31 downto 26);
				is_jump := 0;
				--DEBUG <= 0;
            elsif (is_jump = 1 and cnt > 1) then
                cnt := cnt + 1;
                op := "010101"; --force NOP op code
                PC_drive <= '0'; --unblock PC register
			else
				cnt := cnt + 1;
				op := "010101"; --force NOP op code
				PC_drive <= '1'; --block PC register
			end if;
			old_desr_reg_3 := old_desr_reg_2;
			old_desr_reg_2 := old_desr_reg_1;
			if instruction_bus(31 downto 26) = "000000" then --R-type instruction
				old_desr_reg_1 := instruction_bus(15 downto 11);
			else
				old_desr_reg_1 := instruction_bus(20 downto 16);
			end if;
			if is_jump = 0 and								--if the current instruction is NOT a jump				AND
			((instruction_bus(31 downto 26) = "000000" and	--it is an R-type instruction							AND
			instruction_bus(15 downto 11) /= "00000") or	--if R type instruction destination register is NOT 0	OR
			(instruction_bus(31 downto 26) /= "000000" and	--if is NOT an R-type									AND
			instruction_bus(20 downto 16) /= "00000")) then	--if I type instruction destination register is NOT 0
				validity_bit := (validity_bit(1 downto 0)&'1');	--    IS vaild
			else
				validity_bit := (validity_bit(1 downto 0)&'0');	--IS NOT valid
			end if;
			--CONTROL UNIT
			IR_opcode_shift := op & "00"; --OPCODE multiply func x4 because every instruction takes 4 line in microcode
			IR_func_shift  := func & "00";	--FUNC
			-----------------------------------------------------------------------
			if(ICount1 = 0)then
				if(IR_opcode_shift = "00000000")then --Rtype so we must look at func
					uPC1 <= to_integer(unsigned(IR_func_shift)) + 232;
				else
					uPC1 <= to_integer(unsigned(IR_opcode_shift));
				end if;
				ICount1 <= ICount1 + 1;
			elsif (ICount1 < INSTRUCTIONS_EXECUTION_CYCLES) then
				uPC1 <= uPC1 + 1;
				ICount1 <= ICount1 + 1;
			elsif(ICount1 = INSTRUCTIONS_EXECUTION_CYCLES)then
				if(IR_opcode_shift = "00000000")then --Rtype so we must look at func
					uPC1 <= to_integer(unsigned(IR_func_shift)) + 232;
				else
					uPC1 <= to_integer(unsigned(IR_opcode_shift));
				end if;
				ICount1 <= 1;
			end if;
			-----------------------------------------------------------------------
			if(ICount2 = 0)then
				if(IR_opcode_shift = "00000000")then --Rtype so we must look at func
					uPC2 <= to_integer(unsigned(IR_func_shift)) + 232;
				else
					uPC2 <= to_integer(unsigned(IR_opcode_shift));
				end if;
				ICount2 <= ICount2 + 1;
			elsif (ICount2 < INSTRUCTIONS_EXECUTION_CYCLES) then
				uPC2 <= uPC2 + 1;
				ICount2 <= ICount2 + 1;
			elsif(ICount2 = INSTRUCTIONS_EXECUTION_CYCLES)then
				if(IR_opcode_shift = "00000000")then --Rtype so we must look at func
					uPC2 <= to_integer(unsigned(IR_func_shift)) + 232;
				else
					uPC2 <= to_integer(unsigned(IR_opcode_shift));
				end if;
				ICount2 <= 1;
			end if;
			-----------------------------------------------------------------------
			if(ICount3 = 0)then
				if(IR_opcode_shift = "00000000")then --Rtype so we must look at func
					uPC3 <= to_integer(unsigned(IR_func_shift)) + 232;
				else
					uPC3 <= to_integer(unsigned(IR_opcode_shift));
				end if;
				ICount3 <= ICount3 + 1;
			elsif (ICount3 < INSTRUCTIONS_EXECUTION_CYCLES) then
				uPC3 <= uPC3 + 1;
				ICount3 <= ICount3 + 1;
			elsif(ICount3 = INSTRUCTIONS_EXECUTION_CYCLES)then
				if(IR_opcode_shift = "00000000")then --Rtype so we must look at func
					uPC3 <= to_integer(unsigned(IR_func_shift)) + 232;
				else
					uPC3 <= to_integer(unsigned(IR_opcode_shift));
				end if;
				ICount3 <= 1;
			end if;
			-----------------------------------------------------------------------
			if(ICount4 = 0)then
				if(IR_opcode_shift = "00000000")then --Rtype so we must look at func
					uPC4 <= to_integer(unsigned(IR_func_shift)) + 232;
				else
					uPC4 <= to_integer(unsigned(IR_opcode_shift));
				end if;
				ICount4 <= ICount4 + 1;
			elsif (ICount4 < INSTRUCTIONS_EXECUTION_CYCLES) then
				uPC4 <= uPC4 + 1;
				ICount4 <= ICount4 + 1;
			elsif(ICount4 = INSTRUCTIONS_EXECUTION_CYCLES)then
				if(IR_opcode_shift = "00000000")then --Rtype so we must look at func
					uPC4 <= to_integer(unsigned(IR_func_shift)) + 232;
				else
					uPC4 <= to_integer(unsigned(IR_opcode_shift));
				end if;
				ICount4 <= 1;
			end if;
		end if;
    end process uPC_Proc;
    cw_s <= microcode(uPC1) or microcode(uPC2) or microcode(uPC3) or microcode(uPC4);
	--RF1, RF2, SESel, EN1, S1, S2, ALU1, ALU2, ALU3, ALU4, ALU5, ZSel, EN2, RM, WM, BraE, JmpE, EN3, S3, WF1, RegDst, EN0
    --STAGE 1
    RF1 <= cw_s(CW_SIZE-1);
    RF2 <= cw_s(CW_SIZE-2);
    SESel <= cw_s(CW_SIZE-3);
    EN1 <= cw_s(CW_SIZE-4);
    --STAGE 2
    S1 <= cw_s(CW_SIZE-5);
    S2 <= cw_s(CW_SIZE-6);
    ALU <= cw_s(CW_SIZE-7 downto CW_SIZE-11);
    ZSel <= cw_s(CW_SIZE-12);
    EN2 <= cw_s(CW_SIZE-13);
    --STAGE 3
    RM <= cw_s(CW_SIZE-14);
    WM <= cw_s(CW_SIZE-15);
    BraE <= cw_s(CW_SIZE-16);
    JmpE <= cw_s(CW_SIZE-17);
    EN3 <= cw_s(CW_SIZE-18);
    --STAGE 4
    S3 <= cw_s(CW_SIZE-19);
    WF1 <= cw_s(CW_SIZE-20);
	RegDst <= cw_s(CW_SIZE-21);
    EN0 <= cw_s(CW_SIZE-22);
end BEHAV;